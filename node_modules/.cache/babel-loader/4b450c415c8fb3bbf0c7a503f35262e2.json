{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MinhThanh\\\\Desktop\\\\NhapMon_React\\\\my-app\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Square = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: 'square' + (props.highlight ? ' highlight' : ''),\n  onClick: () => props.onClick(),\n  children: props.value\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      highlight: winLine && winLine.includes(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  createTheBoard() {\n    let squares = [];\n\n    for (let i = 0; i < 9; ++i) {\n      let row = [];\n\n      for (let j = 0; j < 9; ++j) {\n        row.push(this.renderSquare(i * 9 + j));\n      }\n\n      squares.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 20\n      }, this));\n    }\n\n    return squares;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.createTheBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(81).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares, 9).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        latestMoveSquare: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleSortToggle() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winInfo = calculateWinner(current.squares, this.state.boardSize);\n    const winner = winInfo.winner;\n    const moves = history.map((step, move) => {\n      const latestMoveSquare = step.latestMoveSquare;\n      const col = 1 + latestMoveSquare % 5;\n      const row = 1 + Math.floor(latestMoveSquare / 5); // 1. Display the location for each move in the format (col, row) in the move history list.\n\n      const desc = move ? `Go to move #${move} (${col}, ${row})` : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: move === stepNumber ? 'move-list-item-selected' : '',\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      if (winInfo.isDraw) {\n        status = \"Draw\";\n      } else {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n    }\n\n    const isAscending = this.state.isAscending;\n\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i),\n          winLine: winInfo.line\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.handleSortToggle(),\n          children: isAscending ? 'descending' : 'ascending'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nconst calculateWinner = (squares, boardSize) => {\n  let lines = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      if (boardSize - j >= 5) {\n        lines.push([boardSize * i + j, boardSize * i + j + 1, boardSize * i + j + 2, boardSize * i + j + 3, boardSize * i + j + 4]);\n        lines.push([i + boardSize * j, i + boardSize * (j + 1), i + boardSize * (j + 2), i + boardSize * (j + 3), i + boardSize * (j + 4)]);\n\n        if (boardSize - i >= 5) {\n          lines.push([i * boardSize + j, (i + 1) * boardSize + j + 1, (i + 2) * boardSize + j + 2, (i + 3) * boardSize + j + 3, (i + 4) * boardSize + j + 4]);\n          lines.push([i * boardSize + (4 + j), (i + 1) * boardSize + (3 + j), (i + 2) * boardSize + (2 + j), (i + 3) * boardSize + (1 + j), (i + 4) * boardSize + j]);\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c, d, e] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d] && squares[a] === squares[e]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n        isDraw: false\n      };\n    }\n  }\n\n  let isDraw = true;\n\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };\n};\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 210,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["C:/Users/MinhThanh/Desktop/NhapMon_React/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","highlight","onClick","value","Board","Component","renderSquare","i","winLine","squares","includes","createTheBoard","row","j","push","render","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","isAscending","handleClick","slice","current","length","calculateWinner","winner","setState","concat","latestMoveSquare","jumpTo","step","handleSortToggle","winInfo","boardSize","moves","map","move","col","Math","floor","desc","status","isDraw","reverse","line","lines","a","b","c","d","e","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nconst Square = (props) => (\r\n  <button className={'square' + (props.highlight ? ' highlight' : '')}\r\n    onClick={() => props.onClick()}>\r\n    {props.value}\r\n  </button>\r\n);\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const winLine = this.props.winLine;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        highlight={winLine && winLine.includes(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  createTheBoard()\r\n  {\r\n    let squares = [];\r\n    for (let i = 0; i < 9; ++i) {\r\n      let row = [];\r\n      for (let j = 0; j < 9; ++j) {\r\n        row.push(this.renderSquare(i * 9 + j));\r\n      }\r\n      squares.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n    return squares\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>{this.createTheBoard()}</div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(81).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isAscending: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares, 9).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          latestMoveSquare: i\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  handleSortToggle() {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending\r\n    });\r\n  }\r\n\r\n  \r\n\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const stepNumber = this.state.stepNumber;\r\n    const current = history[stepNumber];\r\n    const winInfo = calculateWinner(current.squares, this.state.boardSize);\r\n    const winner = winInfo.winner;\r\n\r\n    const moves = history.map((step, move) => {\r\n      const latestMoveSquare = step.latestMoveSquare;\r\n      const col = 1 + latestMoveSquare % 5;\r\n      const row = 1 + Math.floor(latestMoveSquare / 5);\r\n      // 1. Display the location for each move in the format (col, row) in the move history list.\r\n      const desc = move ?\r\n        `Go to move #${move} (${col}, ${row})` :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          {/* 2. Bold the currently selected item */ }\r\n          <button\r\n            className={move === stepNumber ? 'move-list-item-selected' : ''}\r\n            onClick={() => this.jumpTo(move)}>{desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let  status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      if (winInfo.isDraw) {\r\n        status = \"Draw\";\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n    }\r\n\r\n    const isAscending = this.state.isAscending;\r\n    if (!isAscending) {\r\n      moves.reverse();\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            winLine={winInfo.line}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n        {/* 6. When no one wins, display a message about the result being a draw. */}\r\n          <div>{status}</div>\r\n          {/* 4. Add a toggle button that lets you sort the moves in either ascending or descending order. */}\r\n          <button onClick={() => this.handleSortToggle()}>\r\n            {isAscending ? 'descending' : 'ascending'}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n// ========================================\r\nconst calculateWinner=(squares, boardSize) =>{\r\n  let lines = [];\r\n\r\n  for (let i = 0;i<boardSize;i++)\r\n  {\r\n    for (let j = 0; j<boardSize;j++)\r\n    {\r\n      if (boardSize - j >= 5){\r\n        lines.push([boardSize*i + j, boardSize*i + j + 1, boardSize*i + j + 2,boardSize*i + j + 3,boardSize*i + j + 4]);\r\n        lines.push([i + boardSize * j, i + boardSize * (j + 1) ,i + boardSize * (j + 2),i + boardSize * (j + 3),i + boardSize * (j + 4)]);\r\n        if (boardSize - i >= 5){\r\n          lines.push([i * boardSize + j, (i + 1) * boardSize + j + 1, (i + 2) * boardSize + j + 2, (i + 3) * boardSize + j + 3, (i + 4) * boardSize + j + 4]);\r\n          lines.push([i * boardSize + (4 + j), (i + 1) * boardSize + (3 + j), (i + 2) * boardSize + (2 + j), (i + 3) * boardSize + (1 + j), (i + 4) * boardSize + j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c, d, e] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d] && squares[a] === squares[e]) {\r\n      return {\r\n        winner: squares[a],\r\n        line: lines[i],\r\n        isDraw: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  let isDraw = true;\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === null) {\r\n      isDraw = false;\r\n      break;\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    line: null,\r\n    isDraw: isDraw,\r\n  };\r\n}\r\n\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"]},"metadata":{},"sourceType":"module"}