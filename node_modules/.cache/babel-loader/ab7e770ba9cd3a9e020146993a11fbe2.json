{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MinhThanh\\\\Desktop\\\\RestructureCaro\\\\src\\\\components\\\\Game\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Board from '../Board/Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  const [history, setHistory] = useState([{\n    squares: Array(81).fill(null)\n  }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [isAscending, setIsAscending] = useState(true);\n  const [boardSize, setBoardSize] = useState(9);\n\n  const handleClick = i => {\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[newHistory.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares, boardSize).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory(history.concat([{\n      squares: squares,\n      latestMoveSquare: i\n    }]));\n    setStepNumber(history.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const handleSortToggle = () => {\n    setIsAscending(!isAscending);\n  };\n\n  const current = history[stepNumber];\n  const checkResult = calculateWinner(current.squares, boardSize);\n  const moves = history.map((step, move) => {\n    const latestMoveSquare = step.latestMoveSquare;\n    const col = latestMoveSquare % 5 + 1;\n    const row = Math.floor(latestMoveSquare / 5) + 1;\n    const desc = move ? `Go to move #${move} (${col}, ${row})` : \"Go to game start\";\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: move === stepNumber ? \"move-list-item-selected\" : \"\",\n        onClick: () => jumpTo(move),\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this);\n  });\n  let status;\n\n  if (checkResult.winner) {\n    status = \" The Winner: \" + checkResult.winner;\n  } else {\n    if (checkResult.isDraw) {\n      status = \" The Game Draw\";\n    } else {\n      status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n    }\n  }\n\n  if (!isAscending) {\n    moves.reverse();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        onClick: i => handleClick(i),\n        winLine: checkResult.line\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSortToggle(),\n        children: isAscending ? \"Descending\" : \"Ascending\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"Xnq3sfIg9AuRaTNQMSQfcBvv8lU=\");\n\n_c = Game;\n\nconst calculateWinner = (squares, boardSize) => {\n  let lines = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      if (boardSize - j >= 5) {\n        lines.push([boardSize * i + j, boardSize * i + j + 1, boardSize * i + j + 2, boardSize * i + j + 3, boardSize * i + j + 4]);\n        lines.push([i + boardSize * j, i + boardSize * (j + 1), i + boardSize * (j + 2), i + boardSize * (j + 3), i + boardSize * (j + 4)]);\n\n        if (boardSize - i >= 5) {\n          lines.push([i * boardSize + j, (i + 1) * boardSize + j + 1, (i + 2) * boardSize + j + 2, (i + 3) * boardSize + j + 3, (i + 4) * boardSize + j + 4]);\n          lines.push([i * boardSize + (4 + j), (i + 1) * boardSize + (3 + j), (i + 2) * boardSize + (2 + j), (i + 3) * boardSize + (1 + j), (i + 4) * boardSize + j]);\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c, d, e] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] && squares[a] === squares[d] && squares[a] === squares[e]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n        isDraw: false\n      };\n    }\n  }\n\n  let isDraw = true;\n\n  if (squares.includes(null)) {\n    isDraw = false;\n  }\n\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };\n};\n\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/MinhThanh/Desktop/RestructureCaro/src/components/Game/Game.js"],"names":["React","useState","Board","Game","props","history","setHistory","squares","Array","fill","stepNumber","setStepNumber","xIsNext","setXIsNext","isAscending","setIsAscending","boardSize","setBoardSize","handleClick","i","newHistory","slice","current","length","calculateWinner","winner","concat","latestMoveSquare","jumpTo","step","handleSortToggle","checkResult","moves","map","move","col","row","Math","floor","desc","status","isDraw","reverse","line","lines","j","push","a","b","c","d","e","includes"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport Board from '../Board/Board';\r\n\r\nconst Game = (props) => {\r\n    const [history, setHistory] = useState([\r\n        {\r\n          squares: Array(81).fill(null),\r\n        },\r\n      ]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isAscending, setIsAscending] = useState(true);\r\n    const [boardSize, setBoardSize] = useState(9);\r\n  \r\n    const handleClick = (i) => {\r\n      const newHistory = history.slice(0, stepNumber + 1);\r\n      const current = newHistory[newHistory.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares, boardSize).winner || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = xIsNext ? \"X\" : \"O\";\r\n      setHistory(history.concat([\r\n        {\r\n          squares: squares,\r\n          latestMoveSquare: i,\r\n        },\r\n      ]));\r\n      setStepNumber(history.length);\r\n      setXIsNext(!xIsNext);\r\n    }\r\n  \r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext(step % 2 === 0);\r\n    }\r\n  \r\n    const handleSortToggle = () => {\r\n        setIsAscending(!isAscending);\r\n    }\r\n  \r\n      const current = history[stepNumber];\r\n      const checkResult = calculateWinner(current.squares, boardSize);\r\n      const moves = history.map((step, move) => {\r\n        const latestMoveSquare = step.latestMoveSquare;\r\n        const col = (latestMoveSquare % 5) + 1;\r\n        const row = Math.floor(latestMoveSquare / 5) + 1;\r\n        const desc = move\r\n          ? `Go to move #${move} (${col}, ${row})`\r\n          : \"Go to game start\";\r\n        return (\r\n          <li key={move}>\r\n            {}\r\n            <button\r\n              className={move === stepNumber ? \"move-list-item-selected\" : \"\"}\r\n              onClick={() => jumpTo(move)}\r\n            >\r\n              {desc}\r\n            </button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      let status;\r\n      if (checkResult.winner) {\r\n        status = \" The Winner: \" + checkResult.winner;\r\n      } else {\r\n        if (checkResult.isDraw) {\r\n          status = \" The Game Draw\";\r\n        } else {\r\n          status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n        }\r\n      }\r\n\r\n      if (!isAscending) {\r\n        moves.reverse();\r\n      }\r\n  \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={(i) => handleClick(i)}\r\n              winLine={checkResult.line}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <button onClick={() => handleSortToggle()}>\r\n              {isAscending ? \"Descending\" : \"Ascending\"}\r\n            </button>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n  \r\n  const calculateWinner = (squares, boardSize) => {\r\n    let lines = [];\r\n    for (let i = 0; i < boardSize; i++) {\r\n      for (let j = 0; j < boardSize; j++) {\r\n        if (boardSize - j >= 5) {\r\n          lines.push([\r\n            boardSize * i + j,\r\n            boardSize * i + j + 1,\r\n            boardSize * i + j + 2,\r\n            boardSize * i + j + 3,\r\n            boardSize * i + j + 4,\r\n          ]);\r\n          lines.push([\r\n            i + boardSize * j,\r\n            i + boardSize * (j + 1),\r\n            i + boardSize * (j + 2),\r\n            i + boardSize * (j + 3),\r\n            i + boardSize * (j + 4),\r\n          ]);\r\n          if (boardSize - i >= 5) {\r\n            lines.push([\r\n              i * boardSize + j,\r\n              (i + 1) * boardSize + j + 1,\r\n              (i + 2) * boardSize + j + 2,\r\n              (i + 3) * boardSize + j + 3,\r\n              (i + 4) * boardSize + j + 4,\r\n            ]);\r\n            lines.push([\r\n              i * boardSize + (4 + j),\r\n              (i + 1) * boardSize + (3 + j),\r\n              (i + 2) * boardSize + (2 + j),\r\n              (i + 3) * boardSize + (1 + j),\r\n              (i + 4) * boardSize + j,\r\n            ]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c, d, e] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c] &&\r\n        squares[a] === squares[d] &&\r\n        squares[a] === squares[e]\r\n      ) {\r\n        return {\r\n          winner: squares[a],\r\n          line: lines[i],\r\n          isDraw: false,\r\n        };\r\n      }\r\n    }\r\n  \r\n    let isDraw = true;\r\n    if (squares.includes(null)) {\r\n      isDraw = false;\r\n    }\r\n    return {\r\n      winner: null,\r\n      line: null,\r\n      isDraw: isDraw,\r\n    };\r\n  };\r\n\r\n  export default Game"]},"metadata":{},"sourceType":"module"}